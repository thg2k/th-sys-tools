#!/bin/bash

GDM_ROOT="/srv"
GDM_VERSION="v1"

set -eu
cd $GDM_ROOT

# Create "dist" config file for comparison
rm -f gitlab_docker_manager.conf-dist-tmp
cat <<'_CONF_' >gitlab_docker_manager.conf-dist-tmp
GLMANAGER_CVER="GL1"

GLMANAGER_IMAGE_TYPE="ce"

GLMANAGER_IMAGE_VERSION="x.y.z"

GLMANAGER_IMAGE_RELEASE="0"

GLMANAGER_SERVER_IP="0.0.0.0"

GLMANAGER_HOSTNAME="git.abc.xyz"

GLMANAGER_BACKUP_DIR="/mnt/gitlab-backups"

GLMANAGER_BACKUP_GPG_TARGET=""

GLMANAGER_BACKUP_ROTATE_FILES="12"

GLMANAGER_BACKUP_EXTERNAL_TARGET=""

GLMANAGER_BACKUP_EXTERNAL_PATH=""
_CONF_
if ! cmp -s gitlab_docker_manager.conf-dist-tmp gitlab_docker_manager.conf-dist-$GDM_VERSION
then
  rm -f gitlab_docker_manager.conf-dist-$GDM_VERSION
  echo "Creating template config file '$GDM_ROOT/gitlab_docker_manager.conf-dist-$GDM_VERSION'" >&2
  cp gitlab_docker_manager.conf-dist-tmp gitlab_docker_manager.conf-dist-$GDM_VERSION
fi
rm -f gitlab_docker_manager.conf-dist-tmp
. gitlab_docker_manager.conf-dist-$GDM_VERSION

# Check for local configuration file
if [ ! -e gitlab_docker_manager.conf ]
then
  echo "Creating config file '/srv/gitlab_docker_manager.conf'" >&2
  cp gitlab_docker_manager.conf-dist-$GDM_VERSION gitlab_docker_manager.conf
fi
. gitlab_docker_manager.conf

# Check that local configuration file is valid
if [ "${GLMANAGER_CVER:-}" != "GL1" ]
then
  echo "Bad configuration file, please move it out to create a new one" >&2
  exit 1
fi
if [ "$GLMANAGER_IMAGE_VERSION" = "x.y.z" -o "$GLMANAGER_HOSTNAME" = "git.abc.xyz" ]
then
  echo "*** Please edit file '$GDM_ROOT/gitlab_docker_manager.conf' ***" >&2
  exit 1
fi

if [ -z "${GLMANAGER_IMAGE_NAME:-}" ]
then
  GLMANAGER_IMAGE_NAME="gitlab-$GLMANAGER_IMAGE_TYPE:$GLMANAGER_IMAGE_VERSION-$GLMANAGER_IMAGE_TYPE.$GLMANAGER_IMAGE_RELEASE"
fi

if [ "$#" -ge 1 ]
then
  RUNTIME_MODE="$1"
  shift
else
  RUNTIME_MODE=""
fi

echo "GITLAB \"$GLMANAGER_HOSTNAME\" manager (image '$GLMANAGER_IMAGE_NAME')${RUNTIME_MODE:+: $RUNTIME_MODE}" >&2
echo >&2

if [ -z "$RUNTIME_MODE" -o "$RUNTIME_MODE" = "help" ]
then
  echo -e "Usage: $0 [-rm] <command> [args]" >&2
  echo -e "" >&2
  echo -e "Commands related to docker creation:" >&2
  echo -e "    create(cc)            Creates the container without starting it" >&2
  echo -e "    production(prod,bg)   Starts the production runtime as background docker" >&2
  echo -e "    foreground(fg)        Starts the gitlab docker inside the console" >&2
  echo -e "    maintenance(mnt)      Spawns a shell inside the container for maintenance" >&2
  echo -e "    stop(s)               Stops the running container" >&2
  echo -e "    remove(rm)            Removes the container" >&2
  echo -e "" >&2
  echo -e "Commands related to maintenance:" >&2
  echo -e "    backup(bk)            Creates a backup of the gitlab data" >&2
  echo -e "    copydistconfig(cdc)   Copies the config template from the image" >&2
  echo -e "    diffconfig(dc)        Shows diff for current local config" >&2
  echo -e "    patchconfig(pc)       Patches the current local config with the actual version" >&2
  echo -e "    backupconfig(bkc)     Creates a backup of the local config" >&2
  echo -e "" >&2
  echo -e "Commands related to cron execution:" >&2
  echo -e "    cronautobackup        Performs a full automated backup cycle" >&2
  echo -e "" >&2
  exit 1
fi

# Use colors if STDIN is available
if [ -t 1 ]
then
  RUNTIME_COLORS="true"
else
  RUNTIME_COLORS=""
fi

# Support functions
err() {
  if [ "$RUNTIME_COLORS" = "true" ]
  then
    echo -en "\e[31;1mError: $1\e[m\n\n" >&2
  else
    echo -en "Error: $1\n\n" >&2
  fi
  exit 1
}
warn() {
  if [ "$RUNTIME_COLORS" = "true" ]
  then
    echo -en "\e[31;1mWarning: $1\e[m\n\n" >&2
  else
    echo -en "Warning: $1\n\n" >&2
  fi
}
out() {
  if [ "$RUNTIME_COLORS" = "true" ]
  then
    echo -en "\e[36;1m[+++] $1\e[m\n\n" >&2
  else
    echo -en "[+++] $1\n\n" >&2
  fi
}
cmd() {
  if [ "$RUNTIME_COLORS" = "true" ]
  then
    echo -en "\e[33m+ $@\e[m\n" >&2
  else
    echo -en "+ $@\n" >&2
  fi
  "$@"
}
_ts_saved=""
ts_out() {
  _ts_now=$(date "+%s")
  if [ -n "$_ts_saved" ]
  then
    echo "(time elapsed: +$((_ts_now - $_ts_saved)) s)"
  fi
  if [ "$RUNTIME_COLORS" = "true" ]
  then
    echo -en "\n\e[36;1m[+++] $(date '+[%F %T]') $1\e[m\n" >&2
  else
    echo -en "\n[+++] $(date '+[%F %T]') $1\n" >&2
  fi
  _ts_saved="$_ts_now"
}
ts_warn() {
  _ts_now=$(date "+%s")
  if [ -n "$_ts_saved" ]
  then
    echo "(time elapsed: +$((_ts_now - $_ts_saved)) s)"
  fi
  if [ "$RUNTIME_COLORS" = "true" ]
  then
    echo -en "\n\e[31;1m[---] $(date '+[%F %T]') $1\e[m\n" >&2
  else
    echo -en "\n[---] $(date '+[%F %T]') $1\n" >&2
  fi
  _ts_saved="$_ts_now"
}

# Obtain config file version (if available)
if [ -e gitlab/config/gitlab.rb ]
then
  xcfgver=$(sed -n 's/^## @TEMPLATE_VERSION \(.*\)/\1/p' gitlab/config/gitlab.rb)
  if [ "$xcfgver" != "$GLMANAGER_IMAGE_VERSION" ]
  then
    warn "Config file version '$xcfgver' differs from image '$GLMANAGER_IMAGE_VERSION'" >&2
  fi
else
  xcfgver=""
  warn "Config file not found"
fi

# Common docker argument blocks
xargs_info="
      --name gitlab"
xargs_hostname="
      --hostname $GLMANAGER_HOSTNAME"
xargs_publish_ports="
      --publish $GLMANAGER_SERVER_IP:22:22/tcp
      --publish $GLMANAGER_SERVER_IP:80:80/tcp
      --publish $GLMANAGER_SERVER_IP:443:443/tcp"
xargs_volumes_mount="
      --volume /srv/gitlab/config:/etc/gitlab
      --volume /srv/gitlab/data:/var/opt/gitlab
      --volume /srv/gitlab/logs:/var/log/gitlab"
xargs_xtras=(
      --env GITLAB_PRE_RECONFIGURE_SCRIPT="if test -e /etc/gitlab/docker-wrapper-prehook.sh; then source /etc/gitlab/docker-wrapper-prehook.sh; fi"
      --env GITLAB_POST_RECONFIGURE_SCRIPT="if test -e /etc/gitlab/docker-wrapper-posthook.sh; then source /etc/gitlab/docker-wrapper-posthook.sh; fi"
      --env GITLAB_SKIP_TAIL_LOGS=true
      --ulimit nproc=-1
      --ulimit sigpending=62793)

# Main execution
case "$RUNTIME_MODE" in
  create|cc)
    out "Creating GITLAB docker container using image '$GLMANAGER_IMAGE_NAME'..."
    cmd docker create \
      $xargs_info \
      $xargs_hostname \
      $xargs_publish_ports \
      $xargs_volumes_mount \
      "${xargs_xtras[@]}" \
      --restart unless-stopped \
      gitlab/$GLMANAGER_IMAGE_NAME
    ;;

  production|prod|bg)
    out "Starting GITLAB docker image '$GLMANAGER_IMAGE_NAME' in production mode..."
    cmd docker run \
      $xargs_info \
      $xargs_hostname \
      $xargs_publish_ports \
      $xargs_volumes_mount \
      "${xargs_xtras[@]}" \
      --restart unless-stopped \
      --detach \
      gitlab/$GLMANAGER_IMAGE_NAME
    ;;

  foreground|fg)
    out "Starting GITLAB docker image '$GLMANAGER_IMAGE_NAME' in foreground mode..."
    cmd docker run \
      $xargs_info \
      $xargs_hostname \
      $xargs_publish_ports \
      $xargs_volumes_mount \
      "${xargs_xtras[@]}" \
      -it \
      gitlab/$GLMANAGER_IMAGE_NAME
    ;;

  maintenance|mnt)
    out "Starting GITLAB docker image '$GLMANAGER_IMAGE_NAME' in maintenance mode..."
    cmd docker run \
      $xargs_info \
      $xargs_hostname \
      $xargs_publish_ports \
      $xargs_volumes_mount \
      "${xargs_xtras[@]}" \
      -it \
      gitlab/$GLMANAGER_IMAGE_NAME \
      /bin/bash
    ;;

  stop|s)
    cmd docker stop -t 300 gitlab
    ;;

  remove|rm)
    cmd docker rm gitlab
    ;;

  backup|bk)
    [ -n "$xcfgver" ] || err "Failed to obtain config template version (@TEMPLATE_VERSION)"
    [ -d "$GLMANAGER_BACKUP_DIR" ] || err "Backup path \"$GLMANAGER_BACKUP_DIR\" is not a directory!"
    mkdir -p "$GLMANAGER_BACKUP_DIR/manual"
    fpath="$GLMANAGER_BACKUP_DIR/manual/$GLMANAGER_HOSTNAME-`date +%Y%m%d`-v$xcfgver.tar.gz"
    [ -e "$fpath" ] && err "Output file '$fpath' already exists!"
    crunning=$(docker inspect --format="{{.State.Running}}" gitlab)
    if [ "$crunning" == "true" ]
    then
      err "The instance is running, refusing to backup."
    fi
    out "Creating backup in '$fpath'..."
    cmd tar -zc -f "$fpath" gitlab
    ;;

  cronautobackup)
    [ -n "$xcfgver" ] || err "Failed to obtain config template version (@TEMPLATE_VERSION)"
    [ -d "$GLMANAGER_BACKUP_DIR" ] || err "Backup path \"$GLMANAGER_BACKUP_DIR\" is not a directory!"
    mkdir -p "$GLMANAGER_BACKUP_DIR/auto"
    mkdir .gitlab_docker_manager__backup.lock ||
      err "Failed to create lock sentinel, already running or previously failed!"
    xtailarg="+$((GLMANAGER_BACKUP_ROTATE_FILES + 1))"
    for xdel in $(ls -1t $GLMANAGER_BACKUP_DIR/auto | tail -n $xtailarg)
    do
      ts_out "Deleting backup file rotating out: $xdel"
      rm -f "$GLMANAGER_BACKUP_DIR/auto/$xdel"
    done
    fpath="$GLMANAGER_BACKUP_DIR/auto/$GLMANAGER_HOSTNAME-`date +%Y%m%d`-v$xcfgver.tar.gz.gpg"
    if [ -e "$fpath" ]
    then
      rmdir .gitlab_docker_manager__backup.lock
      err "Output file '$fpath' already exists!"
    fi
    ts_out "Checking GitLab instance status..."
    crunning=$(docker inspect --format="{{.State.Running}}" gitlab)
    if [ "$crunning" != "true" ]
    then
      rmdir .gitlab_docker_manager__backup.lock
      err "The instance is not running, refusing to backup."
    fi
    ts_out "Stopping GitLab instance..."
    cmd docker stop -t 600 gitlab
    ts_out "Creating backup in '$fpath' (encrypt to '$GLMANAGER_BACKUP_GPG_TARGET')..."
    if (set -e -o pipefail; cd /srv; tar -zc gitlab | gpg -e -r "$GLMANAGER_BACKUP_GPG_TARGET" > "$fpath")
    then
      ts_out "Restarting GitLab instance..."
      cmd docker start gitlab
      ts_out "Flushing old backups..."
      cmd find $GLMANAGER_BACKUP_DIR/auto -type f -mtime +15 -print -delete
      if [ -n "${GLMANAGER_BACKUP_EXTERNAL_TARGET:-}" -a -n "${GLMANAGER_BACKUP_EXTERNAL_PATH:-}" ]
      then
        ts_out "Flushing old backups in the external server..."
        ssh "$GLMANAGER_BACKUP_EXTERNAL_TARGET" "set -e; cd $GLMANAGER_BACKUP_EXTERNAL_PATH; ls -1t | tail -n $xtailarg | xargs rm -vf" || :
        ts_out "Propagating the backup to external server..."
        cmd scp -p "$fpath" "$GLMANAGER_BACKUP_EXTERNAL_TARGET:$GLMANAGER_BACKUP_EXTERNAL_PATH/" || :
      else
        ts_out "Skipping propagation to external server (not defined)"
      fi
    else
      ts_warn "BACKUP FAILED! Still restarting GitLab instance..."
      cmd rm -f "$fpath"
      cmd docker start gitlab
    fi
    rmdir .gitlab_docker_manager__backup.lock
    ts_out "Operation completed."
    ;;

  copydistconfig|cdc)
    xrunver=$(docker cp gitlab:/opt/gitlab/embedded/service/gitlab-rails/VERSION - | tar x -O VERSION)
    fdistconf="/srv/gitlab/config/gitlab-dist-v$xrunver.rb"
    out "Copying dist config v$xrunver to '$fdistconf'..."
    cmd docker cp gitlab:/opt/gitlab/etc/gitlab.rb.template $fdistconf
    cmd sed -i -e '/GitLab configuration settings/a ## @TEMPLATE_VERSION '$xrunver $fdistconf
    ;;

  diffconfig|dc)
    diff -U 20 "/srv/gitlab/config/gitlab-dist-v$xcfgver.rb" "/srv/gitlab/config/gitlab.rb" | colordiff | less -R
    ;;

  patchconfig|pc)
    [ -n "$xcfgver" ] || err "Failed to obtain config template version (@TEMPLATE_VERSION)"
    xrunver=$(docker cp gitlab:/opt/gitlab/embedded/service/gitlab-rails/VERSION - | tar x -O VERSION)
    [ -e "/srv/gitlab/config/gitlab-dist-v$xcfgver.rb" ] || err "Couldn't locate dist config 'gitlab-dist-v$xcfgver.rb"
    [ -e "/srv/gitlab/config/gitlab-dist-v$xrunver.rb" ] || err "Couldn't locate dist config 'gitlab-dist-v$xrunver.rb"
    if [ "$xcfgver" != "$xrunver" ]
    then
      diff -u "/srv/gitlab/config/gitlab-dist-v$xcfgver.rb" "/srv/gitlab/config/gitlab-dist-v$xrunver.rb" > "/srv/gitlab/config/PATCH-v$xcfgver-v$xrunver.rb" || :
      out "Applying patch to current configuration file ($xcfgver -> $xrunver)..."
      cmd patch -p0 "/srv/gitlab/config/gitlab.rb" "/srv/gitlab/config/PATCH-v$xcfgver-v$xrunver.rb"
      cmd cp "/srv/gitlab/config/gitlab-dist-v$xrunver.rb" "/srv/gitlab/config/gitlab-dist.rb"
      out "Here is the patch that has been applied:"
      cat "/srv/gitlab/config/PATCH-v$xcfgver-v$xrunver.rb" | colordiff
    else
      out "Your config file is already up to date ($xrunver)"
    fi
    ;;

  backupconfig|bkc)
    [ -n "$xcfgver" ] || err "Failed to obtain config template version (@TEMPLATE_VERSION)"
    xcfged="1"
    out "Backing up runtime config v$xcfgver..."
    cmd cp "/srv/gitlab/config/gitlab.rb" "/srv/gitlab/config/gitlab-config-v$xcfgver-$xcfged.rb"
    cmd diff -u "/srv/gitlab/config/gitlab-dist-v$xcfgver.rb" "/srv/gitlab/config/gitlab.rb" > "/srv/gitlab/config/gitlab-config-v$xcfgver-$xcfged.patch"
    ;;

  *)
    err "Invalid action \"$RUNTIME_MODE\""
esac
